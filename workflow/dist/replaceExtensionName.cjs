"use strict";var h=Object.create;var x=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var R=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var A=(e,s,n,t)=>{if(s&&typeof s=="object"||typeof s=="function")for(let i of F(s))!$.call(e,i)&&i!==n&&x(e,i,{get:()=>s[i],enumerable:!(t=_(s,i))||t.enumerable});return e};var p=(e,s,n)=>(n=e!=null?h(R(e)):{},A(s||!e||!e.__esModule?x(n,"default",{value:e,enumerable:!0}):n,e));var E=p(require("yargs"),1),v=require("yargs/helpers"),l=p(require("fs"),1),r=p(require("path"),1);const D=(0,E.default)((0,v.hideBin)(process.argv)).option("name",{type:"string",description:"The new extension name"}).demandOption("name",'Please provide the "name" argument').parseSync(),o="vue3-template",a=D.name??o,j=y(o),T=y(a);function y(e){return e.split("-").map(s=>s.charAt(0).toUpperCase()+s.slice(1).toLowerCase()).join(" ")}async function m(e,s){try{const n=await l.promises.readFile(e,"utf-8");let t=n;for(const[i,c]of s)t=t.replace(i,c);t!==n&&(await l.promises.writeFile(e,t,"utf-8"),console.log(`Updated: ${e}`))}catch(n){throw console.error(`Error processing file: ${e}`,n),n}}async function k(){const e=r.resolve(__dirname,`../../extensions/${o}/package.json`);await m(e,[[new RegExp(o,"g"),a]])}async function N(){const s=[r.resolve(__dirname,`../../extensions/${o}/README.md`),r.resolve(__dirname,`../../extensions/${o}/README.zh-CN.md`)].map(n=>m(n,[[new RegExp(o,"g"),a]]));await Promise.all(s)}async function C(){const e=r.resolve(__dirname,`../../extensions/${o}/i18n`),s=r.resolve(__dirname,`../../extensions/${o}/src`);async function n(c,g,f){const P=(await l.promises.readdir(c)).map(async u=>{const d=r.join(c,u),w=await l.promises.stat(d);if(w.isDirectory())return n(d,g,f);if(w.isFile()&&u.endsWith(".ts"))return m(d,[[g,f]])});await Promise.all(P)}const i=(await l.promises.readdir(e)).map(c=>m(r.join(e,c),[[new RegExp(j,"g"),T]]));await Promise.all(i),await n(s,new RegExp("i18n:"+o,"g"),"i18n:"+a)}async function M(){const e=r.resolve(__dirname,`../../extensions/${o}`),s=r.resolve(__dirname,`../../extensions/${a}`);try{await l.promises.rename(e,s),console.log(`Successfully renamed folder: ${o} -> ${a}`)}catch(n){throw console.error(`Failed to rename folder: ${o} -> ${a}`,n),n}}async function I(){try{await k(),console.log("Package.json updated successfully."),await N(),console.log("All README files updated successfully."),await C(),console.log("All i18n files updated successfully."),await M(),console.log("Rename Folder successfully.")}catch(e){console.error("Error during extension renaming process:",e)}}I();
